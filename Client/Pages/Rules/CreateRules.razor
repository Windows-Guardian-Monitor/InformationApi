@page "/create_rule"
@using ClientServer.Client.Models
@using System.Text.Json
@using ClientServer.Client.Operators
@using ClientServer.Client.Pages.Components
@using InformationHandlerApi.Business.Responses
@inject HttpClient Http
<PageTitle>Criação de Regras</PageTitle>
<CustomSnackbar SnackbarOperator="_customSnackbarOperator" />
<h3>Selecione as aplicações para bloquear</h3>
@if (_programs is null)
{
	<div>
		Carregando programas...
	</div>
}
else
{
	<div style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 0; margin: 0;">
		<ul style="padding: 0; margin: 0; list-style: none;">
			@foreach (var item in _programs)
			{
				<RuleListItem Program="@item"></RuleListItem>
			}
		</ul>
	</div>

	<Button @onclick=CreateRuleOnServer style="margin-top:10px" class="btn btn-primary">Criar regra</Button>
}

@code {
	private List<UiProgram> _programs;

	private CustomSnackbarOperator _customSnackbarOperator = new();

	private async Task CreateRuleOnServer()
	{
		try
		{
			_customSnackbarOperator.Hide();

			if (_programs.Any(p => p.Selected) is false)
			{
				_customSnackbarOperator.ShowWarningMessage("Por favor selecione pelo menos uma aplicação para criar uma regra.");
				return;
			}

			var selectedPrograms = _programs.Where(p => p.Selected).ToList();

			const string endpoint = "Rules/Create";

			var url = $"{InformationHandler.GetUrl()}{endpoint}";

			var rawResponse = await Http.PostAsJsonAsync(url, JsonSerializer.SerializeToUtf8Bytes(selectedPrograms));

			if (rawResponse.IsSuccessStatusCode is false)
			{
				var errorResponse = JsonSerializer.Deserialize<StandardResponse>(await rawResponse.Content.ReadAsStringAsync());

				_customSnackbarOperator.ShowErrorMessage(errorResponse.Message);
				return;
			}

			_customSnackbarOperator.ShowInformationMessage("Regra criada com sucesso");
		}
		catch (Exception e)
		{
			_customSnackbarOperator.ShowErrorMessage(e.Message);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			const string endpoint = "Program";

			var url = $"{InformationHandler.GetUrl()}{endpoint}";

			var response = await Http.GetAsync(url);

			var content = await response.Content.ReadAsStringAsync();

			_programs = JsonSerializer.Deserialize<List<UiProgram>>(content);
		}
		catch (Exception e)
		{

		}
	}
}
