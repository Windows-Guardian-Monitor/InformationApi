@page "/rules"
@using System.Text.Json
@using ClientServer.Client.Operators.Contracts
@using ClientServer.Client.Pages.Rules.RuleItems
@using ClientServer.Client.Services
@using ClientServer.Shared.Reponses
@using ClientServer.Shared.Requests
@using InformationHandlerApi.Business.Responses
@using InformationHandlerApi.Contracts.Repositories
@using InformationHandlerApi.Database.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ICustomSnackbarOperator _customSnackbarOperator
@inject PageNavigationHelper _pageNavigationHelper
<PageTitle>Regras Gerais</PageTitle>
<h3>Regras Gerais</h3>
<ClientServer.Client.Pages.Components.CustomSnackbar SnackbarOperator="_customSnackbarOperator" />
@if (ShowConfirmation)
{
	<ClientServer.Client.Pages.Components.Confirmation.CustomMBox Title="Confirmar deleção de regra"
																  Message="Tem certeza que deseja apagar esta regra?"
																  OnConfirm="DeleteRule"
																  OnCancel="CancelAction" />
}

@if (_rules is null)
{
	<div>Carregando regras</div>
}
else
{
	<ul style="padding: 0; margin: 0; list-style: none;">
		@foreach (var item in _rules)
		{
			<div class="card" style="margin:10px">
				<RuleWithProgramListItem Rule="@item"></RuleWithProgramListItem>
				<div class="card-footer d-flex justify-content-end border-top-0 bg-white">
					<Button class="btn btn-danger me-2" @onclick="() => ShowDeleteConfirmation(item.RuleId)">
						<i class="bi bi-trash"></i> Apagar
					</Button>
					<Button class="btn btn-warning" @onclick="() => UpdateRule(item.RuleId)">
						<i class="bi bi-pencil"></i> Atualizar
					</Button>
				</div>
			</div>
		}
	</ul>
}



@code {
	private List<DbRule> _rules;
	private const string endpoint = "Rules";

	private bool ShowConfirmation = false;
	private int _id;

	private void ShowDeleteConfirmation(int ruleId)
	{
		_id = ruleId;
		ShowConfirmation = true;
	}

	private async Task DeleteRule()
	{
		ShowConfirmation = false;

		try
		{
			var url = $"{InformationHandler.GetUrl()}{endpoint}/Delete";

			var deleteRuleRequest = new DeleteRuleRequest(_id);

			var response = await Http.PostAsJsonAsync(url, JsonSerializer.SerializeToUtf8Bytes(deleteRuleRequest));

			var content = await response.Content.ReadAsStringAsync();

			var standardResponse = JsonSerializer.Deserialize<StandardResponse>(content);

			if (standardResponse.Success)
			{
				_customSnackbarOperator.ShowInformationMessage("Regra apagada com sucesso");
				_rules.Remove(_rules.FirstOrDefault(r => r.RuleId == _id));
				return;
			}

			_customSnackbarOperator.ShowErrorMessage(standardResponse.Message);
		}
		catch (Exception e)
		{
			_customSnackbarOperator.ShowErrorMessage(e.Message);
		}
		finally
		{
			_id = 0;
		}
	}

	private async Task UpdateRule(int id)
	{
		try
		{
			var getRuleByIdRequest = new GetRuleByIdRequest(id);

			var url = $"{InformationHandler.GetUrl()}{endpoint}/Acquire";

			var rawResponse = await Http.PostAsJsonAsync(url, JsonSerializer.SerializeToUtf8Bytes(getRuleByIdRequest));

			var ruleWithSelectedProgramsResponse = JsonSerializer.Deserialize<RuleWithSelectedProgramsResponse>(await rawResponse.Content.ReadAsStringAsync());

			if (ruleWithSelectedProgramsResponse is null)
			{
				_customSnackbarOperator.ShowErrorMessage("Houve um erro ao tentar atualizar a regra");
				return;
			}

			if (ruleWithSelectedProgramsResponse?.Success is false)
			{
				_customSnackbarOperator.ShowErrorMessage(ruleWithSelectedProgramsResponse.Message);
				return;
			}

			var identifier = _pageNavigationHelper.AddValue<RuleWithSelectedProgramsResponse>(ruleWithSelectedProgramsResponse);

			var pageUrl = $"update_rule/{identifier}";

			NavigationManager.NavigateTo(pageUrl, false);

			//await JsRuntime.InvokeVoidAsync("open", pageUrl);
		}
		catch (Exception e)
		{
			_customSnackbarOperator.ShowErrorMessage(e.Message);
		}
	}

	private void CancelAction()
	{
		_id = 0;
		ShowConfirmation = false;
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var url = $"{InformationHandler.GetUrl()}{endpoint}";

			var response = await Http.GetAsync(url);

			var content = await response.Content.ReadAsStringAsync();

			var ruleResponse = JsonSerializer.Deserialize<RuleResponse>(content);

			_rules = ruleResponse.Rules;

			await base.OnInitializedAsync();
		}
		catch (Exception e)
		{
			_customSnackbarOperator.ShowErrorMessage(e.Message);
		}
	}
}
