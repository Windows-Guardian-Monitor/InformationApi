@page "/create_user"
@using ClientServer.Client.Operators.Contracts
@using ClientServer.Shared.DataTransferObjects.Authentication
@using System.Text.Json
@using InformationHandlerApi.Business.Responses
@inject ICustomSnackbarOperator _snackbarOperator
@inject HttpClient Http

<AuthorizeView Roles="Administrator" Context="authenticationContext">
	<Authorized>
		<ClientServer.Client.Pages.Components.CustomSnackbar SnackbarOperator="_snackbarOperator" />
		<EditForm Model="userModel" OnValidSubmit="HandleValidSubmit">
			<div class="form-group">
				<label for="username">Nome de usuário</label>
				<InputText id="username" class="form-control" @bind-Value="userModel.UserName" />
				<ValidationMessage For="@(() => userModel.UserName)" class="text-danger" />
			</div>

			<div class="form-group">
				<label for="email">E-mail</label>
				<InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
				<ValidationMessage For="@(() => userModel.Email)" class="text-danger" />
			</div>

			@* <div class="form-group">
				<label for="password">Senha</label>
				<InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
				<ValidationMessage For="@(() => userModel.Password)" class="text-danger" />
			</div> *@

			<div class="form-check">
				<InputCheckbox id="isAdmin" class="form-check-input" @bind-Value="userModel.IsAdmin" />
				<label class="form-check-label" for="isAdmin">É administrador</label>
			</div>

			<button type="submit" class="btn btn-primary mt-3">Register</button>
		</EditForm>
	</Authorized>
	<NotAuthorized>
		<ClientServer.Client.Pages.Components.AccessDenied />
	</NotAuthorized>
</AuthorizeView>

@code {
	private UserDto userModel = new UserDto();

	private async Task HandleValidSubmit()
	{
		try
		{
			_snackbarOperator.Hide();

			if (
				string.IsNullOrEmpty(userModel.UserName) ||
				string.IsNullOrEmpty(userModel.Email))
			{
				_snackbarOperator.ShowWarningMessage("Por favor preencha todos os campos do cadastro!");
				return;
			}


			const string endpoint = "Auth/Register";
			var url = $"{InformationHandler.GetUrl()}{endpoint}";

			var response = await Http.PostAsJsonAsync(url, userModel);

			var json = await response.Content.ReadAsStringAsync();

			var stdResponse = JsonSerializer.Deserialize<StandardResponse>(json);

			if (stdResponse.Success is false)
			{
				_snackbarOperator.ShowErrorMessage(stdResponse.Message);
				return;
			}

			_snackbarOperator.ShowInformationMessage("Usuário criado com sucesso, a senha foi enviada ao e-mail cadastrado");
		}
		catch (Exception e)
		{
			_snackbarOperator.ShowErrorMessage(e.Message);
		}
	}
}
