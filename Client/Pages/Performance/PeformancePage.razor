@page "/performance_report"
@using ClientServer.Client.Models
@using ClientServer.Client.Operators.Contracts
@using ClientServer.Shared.Reponses
@using ClientServer.Shared.Reponses.Performances
@using ClientServer.Shared.Requests.Performances


@inject HttpClient Http
@inject PieChartManager _dataSetManager
@inject ICustomSnackbarOperator _customSnackbarOperator

<PageTitle>Relatório de Desempenho</PageTitle>

<AuthorizeView>
	<NotAuthorized>
		<ClientServer.Client.Pages.Components.AccessDenied />
	</NotAuthorized>
	<Authorized>
		<ClientServer.Client.Pages.Components.CustomSnackbar SnackbarOperator="_customSnackbarOperator" />
		<h3>Relatório de Desempenho das Máquinas</h3>
		@if (_workstationList is null)
		{
			<div>Carregando lista de máquinas</div>
		}

		@if (_workstationList is not null && _workstationList.Count is 0)
		{
			<div>Não há máquinas disponíveis para fazer o filtro</div>
		}

		@if (_workstationList is not null && _workstationList.Count > 0)
		{
			<select @bind="@_selectedWorkstation">
				@foreach (var item in _workstationList)
				{
					<option>@item</option>

				}
			</select>
		}

		<div>
			<PieChart @ref="_dataSetManager.PieChart" Width="500" />
		</div>


	</Authorized>
</AuthorizeView>

@code
{
	private string _selectedWorkstation;
	private List<string> _workstationList;

	private bool _hideRamUsage = true;

	private async ValueTask<PerformanceResponse> GetInfoFromServer()
	{
		if (string.IsNullOrEmpty(_selectedWorkstation))
		{
			_customSnackbarOperator.ShowWarningMessage("Por favor selecione uma máquina para buscar as o desempenho dela");
			return null;
		}

		var url = $"{InformationHandler.GetUrl()}Performance/GetPerformanceInformation";

		var performanceRequest = new PerformanceRequest()
			{
				MachineName = _selectedWorkstation
			};

		var r = await Http.PostAsJsonAsync(url, performanceRequest);

		var json = await r.Content.ReadAsStringAsync();

		var response = JsonSerializer.Deserialize<PerformanceResponse>(json);

		if (response is null)
		{
			throw new Exception("Houve um erro ao buscar as aplicações");
		}

		if (response.Success is false)
		{
			throw new Exception(response.Message);
		}

		return response;
	}

	private async ValueTask UpdateInfoOnScreen(PerformanceResponse response)
	{
		if (response is null)
		{
			_customSnackbarOperator.ShowWarningMessage("Atualizando");
			return;
		}

		try
		{
			if (int.TryParse(response.CpuPerformance.CpuUsagePercentage, out var used))
			{
				var available = 100 - used;
				// _dataSetManager.SetChartData(available, used);
				// await _dataSetManager.InitializeChartAsync(available, used);
				await _dataSetManager.UpdateChart(available, used);
			}
			else
			{
				_customSnackbarOperator.ShowWarningMessage("Não foi possível converter as informações vindas do servidor");
			}
		}
		finally
		{
			_customSnackbarOperator.Hide();
		}
	}

	private async ValueTask SearchForNew()
	{
		var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));

		do
		{
			try
			{
				await UpdateInfoOnScreen(await GetInfoFromServer());
			}
			catch
			{
				//ignored
			}

		} while (await periodicTimer.WaitForNextTickAsync());
	}

	private async Task LoadWorkstationsToSelectPerformance()
	{
		var url = $"{InformationHandler.GetUrl()}{"Information/GetAllWorkstations"}";

		var response = await Http.GetFromJsonAsync<AllWorkstationsResponse>(url);

		if (response is null)
		{
			throw new Exception("Houve um erro ao buscar as máquinas");
		}

		if (response.Workstations.Count is 0)
		{
			_workstationList = new List<string>();
			return;
		}

		_workstationList = response.Workstations.Select(w => w.HostName).ToList();

		if (_workstationList.Count is 1)
		{
			_selectedWorkstation = _workstationList[0];
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _dataSetManager.InitializeChartAsync();
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadWorkstationsToSelectPerformance();
		Task.Run(SearchForNew);
		await base.OnInitializedAsync();
	}
}
